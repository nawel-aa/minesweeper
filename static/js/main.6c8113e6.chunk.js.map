{"version":3,"sources":["components/LevelPicker.jsx","components/Dashboard.jsx","components/Grid.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["levels","tiles","mines","rows","LevelPicker","props","useState","levelChecked","setLevelChecked","height","setHeight","width","setWidth","setGrid","setStateOfTheGame","setMines","initGrid","useEffect","checkLevel","event","level","target","value","customSizeWrapper","document","querySelector","classList","remove","add","handleCustomSize","name","error","parseInt","textContent","onSubmit","preventDefault","Math","floor","type","id","checked","onChange","htmlFor","className","onBlur","Dashboard","stateOfTheGame","message","setMessage","timerStart","setTimerStart","timer","setTimer","intervalId","setIntervalId","isInitialMount","useRef","Date","now","clearInterval","current","setInterval","ms","toISOString","substring","openTile","grid","row","col","tile","contains","clickSurroundingTiles","length","Grid","countMinesNextToTiles","firstClickMine","setFirstClickMine","handleLeftClick","dataset","updatedGrid","i","emptyTileIndex","findIndex","removeClickedMine","mineTiles","forEach","rowIndex","tileIndex","mineElement","push","includes","mineTile","openAllMines","Array","from","querySelectorAll","every","isGameWon","handleRightClick","map","_tile","data-row","data-col","data-coord","onClick","onContextMenu","numberOfMines","undefined","tilesArray","array","randomIndex","random","shuffle","tilesPerRow","rowEndIndex","rowBeginIndex","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c8113e6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// LEVELS:\n// => Beginner has 10 mines, 9x9 grid\n// => Intermediate has 40 mines, 16x16 grid\n// => Expert has 99 mines, 16x30 grid\n// => For custom grid, 15% of mines (approx. intermediate)\nconst levels = {\n  beginner: { tiles: 81, mines: 10, rows: 9 },\n  intermediate: {tiles: 256, mines: 40, rows: 16},\n  expert: {tiles: 480, mines: 99, rows: 16}\n};\n\n\nconst LevelPicker = (props) => {\n  const [levelChecked, setLevelChecked] = useState('');\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n  const { setGrid, setStateOfTheGame, setMines, initGrid } = props;\n\n  // Initialization with beginner level\n  useEffect(() => {\n    setGrid(initGrid(levels.beginner));\n    setMines(levels.beginner.mines);\n    setLevelChecked('beginner');\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    setStateOfTheGame('notStarted');\n\n    switch (levelChecked) {\n      case 'custom':\n        if (height > 3 && width > 3) {\n          setGrid(initGrid({\n            tiles: width * height,\n            mines: Math.floor(width * height * 0.15),\n            rows: height\n          }));\n          setMines(Math.floor(width * height * 0.15));\n        }\n        break;\n      case 'intermediate':\n        setGrid(initGrid(levels.intermediate));\n        setMines(levels.intermediate.mines);\n        break;\n      case 'expert':\n        setGrid(initGrid(levels.expert));\n        setMines(levels.expert.mines);\n        break;\n      default:\n        setGrid(initGrid(levels.beginner));\n        setMines(levels.beginner.mines);\n        break;\n    }\n  }\n\n  const checkLevel = (event) => {\n    const level = event.target.value;\n    setLevelChecked(level);\n\n    const customSizeWrapper = document.querySelector('.custom-size');\n\n    if (level === 'custom') {\n      customSizeWrapper.classList.remove('hidden');\n    } else {\n      customSizeWrapper.classList.add('hidden');\n    }\n  }\n\n  const handleCustomSize = (event) => {\n    const name = event.target.name;\n    const error = document.querySelector(`.error-${name}`);\n    const value = parseInt(event.target.value);\n\n    if (value > 2) {\n      error.classList.add('hidden');\n      name === 'height' ? setHeight(value) : setWidth(value);\n    } else {\n      error.classList.remove('hidden');\n      error.textContent = 'Must be a number greater than 2';\n    }\n  }\n\n  return (\n    <div>\n      <h2>Level</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"radio\" name=\"level\" value=\"beginner\" id=\"beginner\" checked={levelChecked === 'beginner'} onChange={checkLevel}/>\n        <label htmlFor=\"beginner\">Beginner</label>\n\n        <input type=\"radio\" name=\"level\" value=\"intermediate\" id=\"intermediate\" checked={levelChecked === 'intermediate'} onChange={checkLevel}/>\n        <label htmlFor=\"intermediate\">Intermediate</label>\n\n        <input type=\"radio\" name=\"level\" value=\"expert\" id=\"expert\" checked={levelChecked === 'expert'} onChange={checkLevel}/>\n        <label htmlFor=\"expert\">Expert</label>\n\n        <input type=\"radio\" name=\"level\" value=\"custom\" id=\"custom\" checked={levelChecked === 'custom'} onChange={checkLevel}/>\n        <label htmlFor=\"custom\">Custom</label>\n        <div className=\"custom-size hidden\">\n          <label htmlFor=\"width\">Width</label>\n          <input type=\"number\" id=\"width\" name=\"width\" onBlur={handleCustomSize}/>\n          <p className=\"error-width hidden\"></p>\n          <label htmlFor=\"height\">Height</label>\n          <input type=\"number\" id=\"height\" name=\"height\" onBlur={handleCustomSize}/>\n          <p className=\"error-height hidden\"></p>\n        </div>\n\n        <button>New game</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LevelPicker;","import React, { useEffect, useState, useRef } from 'react';\n\nconst Dashboard = (props) => {\n  const { mines, stateOfTheGame } = props;\n  const [message, setMessage] = useState('😴');\n  const [timerStart, setTimerStart] = useState(null);\n  const [timer, setTimer] = useState('00:00');\n  const [intervalId, setIntervalId] = useState(null);\n  const isInitialMount = useRef(true);\n\n\n  // TIMER : \n  // On enregistre l'heure au moment du départ.\n  // On affiche l'heure de maintenant moins l'heure de départ.\n  // On actualise toutes les secondes.\n  \n  useEffect(() => {\n    switch (stateOfTheGame) {\n      case 'running':\n        setMessage('🙂');\n        setTimerStart(Date.now);\n        break;\n      case 'won':\n        setMessage('😎');\n        clearInterval(intervalId)\n        break;\n      case 'lost':\n        setMessage('😖');\n        clearInterval(intervalId)\n        break;\n      default:\n        setMessage('😴');\n        setTimer('00:00');\n        break;\n    }\n    return (clearInterval(intervalId));\n    // eslint-disable-next-line\n  }, [stateOfTheGame])\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      setIntervalId(setInterval(() => {\n        const ms = Date.now() - timerStart;\n        setTimer(new Date(ms).toISOString().substring(14, 19));\n      }, 1000));\n    }\n  }, [timerStart])\n\n  return (\n    <div className=\"dashboard\">\n      <div>\n        <p>{mines}</p>\n      </div>\n      <div>\n        <p>{message}</p>\n      </div>\n      <div>\n        <p>{timer}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;","import React, { useEffect } from 'react';\n\nconst openTile = (grid, row, col) => {\n  const tile = document.querySelector(`[data-coord=\"${row}-${col}\"]`);\n\n  // Breaks the loop if the tile has already been opened\n  if (tile && tile.classList.contains('open')) {\n    return;\n  }\n\n  if (grid[row][col] > 0) {\n    tile.className = 'open';\n    tile.textContent = grid[row][col];\n  }\n  if (grid[row][col] === 0) {\n    tile.className = 'open';\n    clickSurroundingTiles(grid, row, col);\n  }\n}\n\nconst clickSurroundingTiles = (grid, row, col) => {\n  // On the same row\n  openTile(grid, row, col + 1);\n  openTile(grid, row, col - 1);\n\n  // On the top row\n  if (row > 0) {\n    openTile(grid, row - 1, col);\n    openTile(grid, row - 1, col + 1);\n    openTile(grid, row - 1, col - 1);\n  }\n\n  // On the row below\n  if (row < grid.length - 1) {\n    openTile(grid, row + 1, col);\n    openTile(grid, row + 1, col + 1);\n    openTile(grid, row + 1, col - 1);\n  }\n}\n\nconst isGameWon = (grid) => {\n  // If only mines are unopen, game is won.\n  const unopenTiles = Array.from(document.querySelectorAll('.unopen'));\n  return unopenTiles.every(tile => {\n    const row = parseInt(tile.dataset.row);\n    const col = parseInt(tile.dataset.col);\n    return grid[row][col] === 'X';\n  });\n}\n\nconst openAllMines = (grid) => {\n      const mineTiles = [];\n\n      // Open all mines\n      grid.forEach((row, rowIndex) => {\n        row.forEach((tile, tileIndex) => {\n          const mineElement = document.querySelector(`[data-coord=\"${rowIndex}-${tileIndex}\"]`);\n\n          if (tile === 'X') {\n            mineTiles.push(mineElement);\n            // Highlight flagged tiles that didn't have a mine.\n          } else if (mineElement.className.includes('flagged')) {\n            mineElement.className = 'open wrong-flag';\n          }\n        })\n      })\n      mineTiles.forEach(mineTile => {\n        mineTile.className = 'open mine';\n      });\n}\n\nconst removeClickedMine = (grid, row, col) => {\n  // Switch the mine with the first empty tile of the grid.\n  let i = 0;\n  let value = 'X';\n  let updatedGrid = grid;\n  while (value === 'X') {\n    const emptyTileIndex = updatedGrid[i].findIndex(tile => tile === 0);\n    if (emptyTileIndex !== -1) {\n      value = 0;\n      updatedGrid[row][col] = 0;\n      updatedGrid[i][emptyTileIndex] = 'X';\n    }\n    i += 1;\n  }\n  return updatedGrid;\n}\n\nconst Grid = (props) => {\n  const { stateOfTheGame, setStateOfTheGame, grid, countMinesNextToTiles, setGrid, firstClickMine, setFirstClickMine } = props;\n\n  // Left click logic\n  // => If it's a mine, you lose.\n  // => If it's a number, the tile opens and the number is displayed.\n  // => If it's an empty tile, the tile and it's surrounding tiles open.\n  const handleLeftClick = (event) => {\n    if (stateOfTheGame === 'won' || stateOfTheGame === 'lost') {\n      return;\n    }\n\n    const tile = event.target;\n    const row = parseInt(tile.dataset.row);\n    const col = parseInt(tile.dataset.col);\n    let value = grid[row][col];\n\n    if (stateOfTheGame === 'notStarted') {\n      setStateOfTheGame('running');\n\n      if (value === 'X') {\n        const updatedGrid = removeClickedMine(grid, row, col);\n        setGrid(countMinesNextToTiles(updatedGrid));\n        setFirstClickMine({ row, col });\n        return;\n      }\n    }\n\n    // If the tile is a mine\n    if (value === 'X') {\n      setStateOfTheGame('lost');\n      openAllMines(grid, tile);\n      tile.classList.add('mine-clicked');\n\n    // If the tile is empty\n    } else if (value === 0) {\n      tile.className = 'open';\n      clickSurroundingTiles(grid, row, col);\n      \n      // If the tile is a number\n    } else {\n      tile.className = 'open';\n      tile.textContent = value;\n    }\n\n    // Check if game is won\n    isGameWon(grid) && setStateOfTheGame('won');\n  }\n\n  // Right click logic\n  // => First click adds a flag.\n  // => Second click transforms it into a question mark.\n  // => Third click resets it.\n  const handleRightClick = (event) => {\n    event.preventDefault();\n\n    if (stateOfTheGame === 'lost' || stateOfTheGame === 'won') {\n      return;\n    }\n\n    stateOfTheGame === 'notStarted' && setStateOfTheGame('running');\n    \n    const tile = event.target;\n    if (tile.classList.contains('open')) {\n      return;\n    } else if (tile.classList.contains('flagged')) {\n      tile.classList.remove('flagged');\n      tile.classList.add('question');\n    } else if (tile.classList.contains('question')) {\n      tile.classList.remove('question');\n    } else {\n      tile.classList.add('flagged');\n    }\n  }\n\n  // If the first click was a mine, open the tile after re-render\n  useEffect(() => {\n    if (firstClickMine) {\n      openTile(grid, firstClickMine.row, firstClickMine.col);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [firstClickMine])\n  \n  return (\n    <table>\n      <tbody>\n        {props.grid.map((row, rowIndex) => {\n          return (\n            <tr key={`${rowIndex}-${row}`}>\n              {row.map((_tile, tileIndex) => {\n                return(\n                  <td key={`${rowIndex}-${tileIndex}`} data-row={rowIndex} data-col={tileIndex} data-coord={`${rowIndex}-${tileIndex}`} className='unopen' onClick={handleLeftClick} onContextMenu={handleRightClick}>\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Grid;","import React, { useState } from 'react';\nimport LevelPicker from './LevelPicker';\nimport Dashboard from './Dashboard';\nimport Grid from './Grid';\n\n// TODO:\n// Styling.\n\n// Uses the Fisher-Yates algorithm to shuffle the array\nconst shuffle = (array) => {\n  let i = array.length;\n  let randomIndex;\n\n  while(i !== 0) {\n    randomIndex = Math.floor(Math.random() * i);\n    i -= 1;\n\n    [array[i], array[randomIndex]] = [array[randomIndex], array[i]];\n  }\n\n  return array;\n};\n\n// Takes an array or arrays.\n// For each tile of these arrays, counts the mines in the surrounding tiles and replaces the tile's value by the sum.\n// Returns the new array of arrays.\nconst countMinesNextToTiles = (grid) => {\n  return grid.map((row, rowIndex) => {\n    return row.map((tile, tileIndex) => {\n      // If the tile is not a mine, sum the number of mines next to it\n      if (tile !== 'X') {\n        let numberOfMines = 0;\n\n        // Tiles next to this tile, on the same row\n        if (row[tileIndex + 1] === 'X') {\n          numberOfMines += 1;\n        }\n        if (row[tileIndex - 1] === 'X') {\n          numberOfMines += 1;\n        }\n\n        // Tiles next to this tile, on the row before\n        if (rowIndex > 0) {\n          if (grid[rowIndex - 1][tileIndex] === 'X') {\n            numberOfMines += 1;\n          }\n          if ((grid[rowIndex + 1] !== undefined) && (grid[rowIndex - 1][tileIndex + 1] === 'X')) {\n            numberOfMines += 1;\n          }\n          if (tileIndex > 0 && grid[rowIndex - 1][tileIndex - 1] === 'X') {\n            numberOfMines += 1;\n          }\n        }\n\n        // Tiles next to this tile, on the row after\n        if (rowIndex < grid.length - 1) {\n          if (grid[rowIndex + 1][tileIndex] === 'X') {\n            numberOfMines += 1;\n          }\n          if (grid[rowIndex + 1][tileIndex + 1] === 'X') {\n            numberOfMines += 1;\n          }\n          if (tileIndex > 0 && grid[rowIndex + 1][tileIndex - 1] === 'X') {\n            numberOfMines += 1;\n          }\n        }\n        return numberOfMines;\n      }\n      return 'X';\n    });\n  });\n}\n\n// Returns an array of arrays. Each array is a row, containing one tile per column. For a grid of 3 x 3, we would have:\n// [\n//  [tile-col1, tile-col2, tile-col3],\n//  [tile-col1, tile-col2, tile-col3],\n//  [tile-col1, tile-col3, tile-col3]\n// ]\nconst initGrid = ({ tiles, mines, rows }) => {\n  const tilesArray = [];\n\n  // Add the good tiles\n  for (let i = 0; i < tiles - mines; i += 1) {\n    tilesArray.push(0);\n  }\n\n  // Add the mine tiles\n  for (let i = 0; i < mines; i += 1) {\n    tilesArray.push('X');\n  }\n  \n  shuffle(tilesArray);\n\n  const grid = [];\n  const tilesPerRow = tilesArray.length / rows;\n\n  // Cut the array into rows.\n  for (let i = 1; i <= rows; i += 1) {\n    const rowEndIndex = i * tilesPerRow;\n    const rowBeginIndex = (i - 1) * tilesPerRow;\n    grid.push(tilesArray.slice(rowBeginIndex, rowEndIndex));\n  }\n\n  // Add the number tiles\n  return countMinesNextToTiles(grid);\n};\n\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n  const [stateOfTheGame, setStateOfTheGame] = useState('notStarted');\n  const [mines, setMines] = useState(0);\n  const [firstClickMine, setFirstClickMine] = useState(null);\n\n  return (\n    <div>\n      <h1>Minesweeper</h1>\n\n      <LevelPicker\n        setGrid={setGrid}\n        setStateOfTheGame={setStateOfTheGame}\n        stateOfTheGame={stateOfTheGame}\n        setMines={setMines}\n        initGrid={initGrid}\n      />\n\n      <div className='game'>\n        <Dashboard stateOfTheGame={stateOfTheGame}\n          mines={mines}\n        />\n        \n        <Grid\n          grid={grid}\n          setStateOfTheGame={setStateOfTheGame}\n          stateOfTheGame={stateOfTheGame}\n          countMinesNextToTiles={countMinesNextToTiles}\n          setGrid={setGrid}\n          firstClickMine={firstClickMine}\n          setFirstClickMine={setFirstClickMine}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}